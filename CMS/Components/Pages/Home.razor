@page "/"
@using CMS.Components.Components
@using CMS.Services
@using LibGit2Sharp
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject GitService GitService
@inject SettingService SettingService

<div class="row w-100">
    <div class="col-sm-1 offset-9 d-flex justify-content-center align-items-center">
        <MudTooltip Text="Alle Änderungen zurücksetzen">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="ResetChanges" Color="Color.Primary" Disabled="!hasChanges"></MudIconButton>
        </MudTooltip>
    </div>
    <div class="col-sm-2 d-flex justify-content-center align-items-center">
        <MudButton Class="mt-5 mb-5" Variant="Variant.Filled" OnClick="CommitAndPush" Color="Color.Primary" Disabled="!hasChanges">Änderungen Hochladen</MudButton>
    </div>
</div>

<MudTabs Centered="true" Color="Color.Primary">
    <MudTabPanel Text="Texte">
        <div class="mt-5" style="display: flex; align-items: center; justify-content: center; width: 100vw; flex-direction: column">
            @foreach (var text in Texts)
            {
            <div class="row align-items-center" style="width: 85%; margin-bottom: 1em">
                <div class="col-11 d-flex justify-content-center align-items-center">
                    <MudField Label="@text.description">@text.value</MudField>
                </div>
                <div class="col-1 d-flex justify-content-center align-items-center">
                    <MudIconButton Color="Color.Primary" OnClick="() => EditText(text)" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                </div>
            </div>
            }
        </div>
       
    </MudTabPanel>
    <MudTabPanel Text="Alben">
        <div class="d-flex justify-content-end pr-5">
            <MudIconButton Class="mt-5 mb-1" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" OnClick="AddAlbum" Color="Color.Primary"></MudIconButton>
        </div>
        <div class="p-5 pt-0" style="display: flex; flex-wrap: wrap; gap: 2em">
            @foreach (var album in Albums)
            {
                <AlbumComponent OnLoadData="GetData" Album="@album"/>
            }
        </div>

    </MudTabPanel>
    <MudTabPanel Text="Bilder">
        @foreach (var image in SingleImages)
        {
            <SingleImage LoadData="GetData" Image="image"></SingleImage>
        }
    </MudTabPanel>
</MudTabs>

@code {

    private AlbumItem[] Albums { get; set; } = [];
    private TextItem[] Texts { get; set; } = [];
    private SingleImageItem[] SingleImages { get; set; } = [];
    private bool hasChanges = false;
    
    protected override async Task OnInitializedAsync()
    {
        await HandleSetup();
    }

    public void CommitAndPush()
    {
        using var repo = new Repository(Path.Combine(FileSystem.AppDataDirectory, "Repo"));

        Commands.Stage(repo, "*");

        var signature = new Signature(SettingService.GitUser, SettingService.GitUser, DateTimeOffset.Now);
        repo.Commit("Changed Content, automaticaly generated by CMS", signature, signature);

        repo.Network.Push(repo.Head, new PushOptions
        {
            CredentialsProvider = (_url, _user, _cred) =>
                new UsernamePasswordCredentials
                {
                    Username = "git", 
                    Password = SettingService.GitToken
                }   
        });
    }

    private async Task ResetChanges()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, BackdropClick = false, MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = false};
        var parameters = new DialogParameters<GenericDialog> { { x => x.Text, "Willst du das alle Änderungen zurücksetzten? Sie können nicht mehr hergestellt werden." }, {x => x.Header, "Zurücksetzten"}, {x => x.ButtonText, "Zurücksetzten"}, {x => x.CancelText, "Abbrechen"} };

        var dialog = await DialogService.ShowAsync<GenericDialog>("",parameters, options);
        var result = await dialog.Result;
        
        if(!result.Canceled)
        {
            using var repo = new Repository(Path.Combine(FileSystem.AppDataDirectory, "Repo"));
            var lastCommit = repo.Head.Tip;
            repo.Reset(ResetMode.Hard, lastCommit);
            StateHasChanged();
            GetData();
        }
    }
    
    private async Task AddAlbum()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = true, BackdropClick = false, MaxWidth = MaxWidth.Medium, FullWidth = true};

        var dialog = await DialogService.ShowAsync<AddAlbumDialog>("Neues Album erstellen", options);
        var result = await dialog.Result;
        
        if(!result.Canceled)
        {
            GetData();
        }
    }
    
    private async Task EditText(TextItem text)
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = true, BackdropClick = false, MaxWidth = MaxWidth.Medium, FullWidth = true};
        var parameters = new DialogParameters<EditTextDialog> { { x => x.Text, text } };

        var dialog = await DialogService.ShowAsync<EditTextDialog>("Text editieren",parameters, options);
        var result = await dialog.Result;
        
        if(!result.Canceled)
        {
            GetData();
        }
    }

    private void GetChanged()
    {
        using var repo = new Repository(Path.Combine(FileSystem.AppDataDirectory, "Repo"));
        RepositoryStatus status = repo.RetrieveStatus();
        hasChanges = status.IsDirty; 
    }
    
    private void GetData()
    {
        Albums = JsonService.GetItems<AlbumItem[]>(Path.Combine(FileSystem.AppDataDirectory, "Repo", "public", "data", "alben.json"));
        Texts = JsonService.GetItems<TextItem[]>(Path.Combine(FileSystem.AppDataDirectory, "Repo", "public", "data", "texts.json"));
        SingleImages = JsonService.GetItems<SingleImageItem[]>(Path.Combine(FileSystem.AppDataDirectory, "Repo", "public", "data", "images.json"));
        StateHasChanged();
    }
    
    private async Task HandleSetup()
    {
        SettingService.GetGitUrl();

        if (!SettingService.CheckSettingsJson() || string.IsNullOrEmpty(SettingService.GitUrl))
        {
            var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, BackdropClick = false };
            var dialog = await DialogService.ShowAsync<SetupDialog>("Website Repo festlegen", options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                GetData();
                GetChanged();
            }
        }
        else
        {
            if (!GitService.CheckRepo())
            {
                GitService.CloneRepo();
            }
            GetData();
            GetChanged();
        }
    }

}